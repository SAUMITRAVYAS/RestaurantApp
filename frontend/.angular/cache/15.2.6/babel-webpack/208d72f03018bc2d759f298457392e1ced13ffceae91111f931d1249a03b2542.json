{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DispDishService } from '../disp-dishes/disp-dish.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../disp-dishes/disp-dish.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction AddDishComponent_div_12_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Dish Name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddDishComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, AddDishComponent_div_12_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.dishForm.get(\"dishName\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n  }\n}\nfunction AddDishComponent_div_17_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Dish Description is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddDishComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, AddDishComponent_div_17_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r1.dishForm.get(\"dishDescription\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n  }\n}\nfunction AddDishComponent_div_22_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Dish Price is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddDishComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, AddDishComponent_div_22_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r2.dishForm.get(\"dishPrice\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n  }\n}\nfunction AddDishComponent_div_27_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Dish Image is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddDishComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, AddDishComponent_div_27_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r3.dishForm.get(\"dishImage\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n  }\n}\nfunction AddDishComponent_div_32_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"nature is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddDishComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, AddDishComponent_div_32_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r4.dishForm.get(\"nature\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n  }\n}\nexport class AddDishComponent {\n  constructor(service) {\n    this.service = service;\n    // Define a form group with form controls for dish name, description, price, image, and nature\n    this.dishForm = new FormGroup({\n      dishName: new FormControl('', [Validators.required]),\n      dishDescription: new FormControl('', [Validators.required]),\n      dishPrice: new FormControl(0, [Validators.required]),\n      dishImage: new FormControl('', [Validators.required]),\n      nature: new FormControl('', [Validators.required])\n      // dishCategory: ['', Validators.required]\n    });\n  }\n  // This method is called when the form is submitted\n  onSubmit() {\n    // Extract the category ID from the URL\n    const urlPath = new URL(window.location.href).pathname;\n    const categoryId = parseInt(urlPath.split(\"/\")[2]);\n    // Validate the form\n    if (this.dishForm.valid) {\n      // Call the addDish() method of the DispDishService to add the new dish to the menu\n      this.service.addDish(categoryId, this.dishForm.value).subscribe(res => {\n        console.log(res);\n      });\n    }\n    // Log the form values and validity\n    console.log(this.dishForm.value, this.dishForm.valid);\n  }\n}\nAddDishComponent.ɵfac = function AddDishComponent_Factory(t) {\n  return new (t || AddDishComponent)(i0.ɵɵdirectiveInject(i1.DispDishService));\n};\nAddDishComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddDishComponent,\n  selectors: [[\"app-add-dish\"]],\n  features: [i0.ɵɵProvidersFeature([DispDishService])],\n  decls: 36,\n  vars: 6,\n  consts: [[1, \"container\"], [1, \"row\"], [1, \"col-md-12\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"dishName\"], [\"type\", \"text\", \"id\", \"dishName\", \"formControlName\", \"dishName\", 1, \"form-control\"], [\"class\", \"text-danger mt-1\", 4, \"ngIf\"], [\"for\", \"dishDescription\"], [\"id\", \"dishDescription\", \"formControlName\", \"dishDescription\", 1, \"form-control\"], [\"for\", \"dishPrice\"], [\"type\", \"number\", \"id\", \"dishPrice\", \"formControlName\", \"dishPrice\", 1, \"form-control\"], [\"for\", \"dishImage\"], [\"type\", \"text\", \"id\", \"dishImage\", \"formControlName\", \"dishImage\", 1, \"form-control\"], [\"type\", \"text\", \"id\", \"dishImage\", \"formControlName\", \"nature\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"text-danger\", \"mt-1\"], [4, \"ngIf\"]],\n  template: function AddDishComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h3\");\n      i0.ɵɵtext(4, \"Add Dish\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"div\", 2)(7, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function AddDishComponent_Template_form_ngSubmit_7_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(8, \"div\", 4)(9, \"label\", 5);\n      i0.ɵɵtext(10, \"Dish Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 6);\n      i0.ɵɵtemplate(12, AddDishComponent_div_12_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 4)(14, \"label\", 8);\n      i0.ɵɵtext(15, \"Dish Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"textarea\", 9);\n      i0.ɵɵtemplate(17, AddDishComponent_div_17_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 4)(19, \"label\", 10);\n      i0.ɵɵtext(20, \"Dish Price\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(21, \"input\", 11);\n      i0.ɵɵtemplate(22, AddDishComponent_div_22_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"div\", 4)(24, \"label\", 12);\n      i0.ɵɵtext(25, \"Dish Image URL\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(26, \"input\", 13);\n      i0.ɵɵtemplate(27, AddDishComponent_div_27_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"div\", 4)(29, \"label\", 12);\n      i0.ɵɵtext(30, \"Nature\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(31, \"input\", 14);\n      i0.ɵɵtemplate(32, AddDishComponent_div_32_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"div\", 4)(34, \"button\", 15);\n      i0.ɵɵtext(35, \"Submit\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      let tmp_3_0;\n      let tmp_4_0;\n      let tmp_5_0;\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"formGroup\", ctx.dishForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.dishForm.get(\"dishName\")) == null ? null : tmp_1_0.invalid) && (((tmp_1_0 = ctx.dishForm.get(\"dishName\")) == null ? null : tmp_1_0.dirty) || ((tmp_1_0 = ctx.dishForm.get(\"dishName\")) == null ? null : tmp_1_0.touched)));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.dishForm.get(\"dishDescription\")) == null ? null : tmp_2_0.invalid) && (((tmp_2_0 = ctx.dishForm.get(\"dishDescription\")) == null ? null : tmp_2_0.dirty) || ((tmp_2_0 = ctx.dishForm.get(\"dishDescription\")) == null ? null : tmp_2_0.touched)));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.dishForm.get(\"dishPrice\")) == null ? null : tmp_3_0.invalid) && (((tmp_3_0 = ctx.dishForm.get(\"dishPrice\")) == null ? null : tmp_3_0.dirty) || ((tmp_3_0 = ctx.dishForm.get(\"dishPrice\")) == null ? null : tmp_3_0.touched)));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.dishForm.get(\"dishImage\")) == null ? null : tmp_4_0.invalid) && (((tmp_4_0 = ctx.dishForm.get(\"dishImage\")) == null ? null : tmp_4_0.dirty) || ((tmp_4_0 = ctx.dishForm.get(\"dishImage\")) == null ? null : tmp_4_0.touched)));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_5_0 = ctx.dishForm.get(\"nature\")) == null ? null : tmp_5_0.invalid) && (((tmp_5_0 = ctx.dishForm.get(\"nature\")) == null ? null : tmp_5_0.dirty) || ((tmp_5_0 = ctx.dishForm.get(\"nature\")) == null ? null : tmp_5_0.touched)));\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\".container[_ngcontent-%COMP%]{\\r\\n    margin-top: 20px ;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYWRkLWRpc2gvYWRkLWRpc2guY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGlCQUFpQjtBQUNyQiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXJ7XHJcbiAgICBtYXJnaW4tdG9wOiAyMHB4IDtcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","DispDishService","i0","AddDishComponent","constructor","service","dishName","required","dishDescription","dishPrice","dishImage","nature","onSubmit","urlPath","URL","window","location","href","pathname","categoryId","parseInt","split","dishForm","valid","addDish","value","subscribe","res","console","log","selectors","features","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\New folder\\MyRestaurant\\src\\app\\add-dish\\add-dish.component.ts","D:\\New folder\\MyRestaurant\\src\\app\\add-dish\\add-dish.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DispDishService } from '../disp-dishes/disp-dish.service';\n\n@Component({\n  selector: 'app-add-dish',\n  templateUrl: './add-dish.component.html',\n  styleUrls: ['./add-dish.component.css'],\n  providers: [DispDishService]\n})\nexport class AddDishComponent {\n\n  // Define a form group with form controls for dish name, description, price, image, and nature\n  dishForm = new FormGroup({\n    dishName: new FormControl('', [Validators.required]),\n    dishDescription: new FormControl('', [Validators.required]),\n    dishPrice: new FormControl(0, [Validators.required]),\n    dishImage: new FormControl('', [Validators.required]),\n    nature: new FormControl('', [Validators.required]),\n    // dishCategory: ['', Validators.required]\n  });\n\n  constructor(private service: DispDishService) {\n  }\n\n  // This method is called when the form is submitted\n  onSubmit() {\n\n    // Extract the category ID from the URL\n    const urlPath = new URL(window.location.href).pathname;\n    const categoryId = parseInt(urlPath.split(\"/\")[2])\n\n    // Validate the form\n    if (this.dishForm.valid) {\n\n      // Call the addDish() method of the DispDishService to add the new dish to the menu\n      this.service.addDish(categoryId,this.dishForm.value).subscribe(res =>{\n        console.log(res);\n      })\n    }\n\n    // Log the form values and validity\n    console.log(this.dishForm.value, this.dishForm.valid);\n  }\n}","<div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <h3>Add Dish</h3>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <form [formGroup]=\"dishForm\" (ngSubmit)=\"onSubmit()\">\n          <div class=\"form-group\">\n            <label for=\"dishName\">Dish Name</label>\n            <input type=\"text\" class=\"form-control\" id=\"dishName\" formControlName=\"dishName\">\n            <div *ngIf=\"dishForm.get('dishName')?.invalid && (dishForm.get('dishName')?.dirty || dishForm.get('dishName')?.touched)\" class=\"text-danger mt-1\">\n              <div *ngIf=\"dishForm.get('dishName')?.errors?.['required']\">Dish Name is required</div>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"dishDescription\">Dish Description</label>\n            <textarea class=\"form-control\" id=\"dishDescription\" formControlName=\"dishDescription\"></textarea>\n            <div *ngIf=\"dishForm.get('dishDescription')?.invalid && (dishForm.get('dishDescription')?.dirty || dishForm.get('dishDescription')?.touched)\" class=\"text-danger mt-1\">\n              <div *ngIf=\"dishForm.get('dishDescription')?.errors?.['required']\">Dish Description is required</div>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"dishPrice\">Dish Price</label>\n            <input type=\"number\" class=\"form-control\" id=\"dishPrice\" formControlName=\"dishPrice\">\n            <div *ngIf=\"dishForm.get('dishPrice')?.invalid && (dishForm.get('dishPrice')?.dirty || dishForm.get('dishPrice')?.touched)\" class=\"text-danger mt-1\">\n              <div *ngIf=\"dishForm.get('dishPrice')?.errors?.['required']\">Dish Price is required</div>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"dishImage\">Dish Image URL</label>\n            <input type=\"text\" class=\"form-control\" id=\"dishImage\" formControlName=\"dishImage\">\n            <div *ngIf=\"dishForm.get('dishImage')?.invalid && (dishForm.get('dishImage')?.dirty || dishForm.get('dishImage')?.touched)\" class=\"text-danger mt-1\">\n              <div *ngIf=\"dishForm.get('dishImage')?.errors?.['required']\">Dish Image is required</div>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"dishImage\">Nature</label>\n            <input type=\"text\" class=\"form-control\" id=\"dishImage\" formControlName=\"nature\">\n            <div *ngIf=\"dishForm.get('nature')?.invalid && (dishForm.get('nature')?.dirty || dishForm.get('nature')?.touched)\" class=\"text-danger mt-1\">\n              <div *ngIf=\"dishForm.get('nature')?.errors?.['required']\">nature is required</div>\n            </div>\n          </div>\n          <!-- <div class=\"form-group\">\n            <input type=\"hidden\" id=\"dishCategory\" formControlName=\"dishCategory\" [value]=\"categoryId\">\n          </div> -->\n          <div class=\"form-group\">\n            <button type=\"submit\" class=\"btn btn-primary\" >Submit</button>\n            <!-- <button type=\"submit\" class=\"btn btn-primary\" >Submit</button> -->\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}